// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: likechain/likenft/v1/blind_box_content.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BlindBoxContent struct {
	ClassId string   `protobuf:"bytes,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	Id      string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Input   NFTInput `protobuf:"bytes,3,opt,name=input,proto3" json:"input"`
}

func (m *BlindBoxContent) Reset()         { *m = BlindBoxContent{} }
func (m *BlindBoxContent) String() string { return proto.CompactTextString(m) }
func (*BlindBoxContent) ProtoMessage()    {}
func (*BlindBoxContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_2037d314d9785b73, []int{0}
}
func (m *BlindBoxContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlindBoxContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlindBoxContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlindBoxContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlindBoxContent.Merge(m, src)
}
func (m *BlindBoxContent) XXX_Size() int {
	return m.Size()
}
func (m *BlindBoxContent) XXX_DiscardUnknown() {
	xxx_messageInfo_BlindBoxContent.DiscardUnknown(m)
}

var xxx_messageInfo_BlindBoxContent proto.InternalMessageInfo

func (m *BlindBoxContent) GetClassId() string {
	if m != nil {
		return m.ClassId
	}
	return ""
}

func (m *BlindBoxContent) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BlindBoxContent) GetInput() NFTInput {
	if m != nil {
		return m.Input
	}
	return NFTInput{}
}

func init() {
	proto.RegisterType((*BlindBoxContent)(nil), "likechain.likenft.v1.BlindBoxContent")
}

func init() {
	proto.RegisterFile("likechain/likenft/v1/blind_box_content.proto", fileDescriptor_2037d314d9785b73)
}

var fileDescriptor_2037d314d9785b73 = []byte{
	// 256 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0xc9, 0xc9, 0xcc, 0x4e,
	0x4d, 0xce, 0x48, 0xcc, 0xcc, 0xd3, 0x07, 0xb1, 0xf2, 0xd2, 0x4a, 0xf4, 0xcb, 0x0c, 0xf5, 0x93,
	0x72, 0x32, 0xf3, 0x52, 0xe2, 0x93, 0xf2, 0x2b, 0xe2, 0x93, 0xf3, 0xf3, 0x4a, 0x52, 0xf3, 0x4a,
	0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x44, 0xe0, 0xaa, 0xf5, 0xa0, 0xaa, 0xf5, 0xca, 0x0c,
	0xa5, 0x44, 0xd2, 0xf3, 0xd3, 0xf3, 0xc1, 0x0a, 0xf4, 0x41, 0x2c, 0x88, 0x5a, 0x29, 0x15, 0xac,
	0x26, 0xe7, 0xa5, 0x95, 0xc4, 0x67, 0xe6, 0x15, 0x94, 0x42, 0x4d, 0x54, 0xaa, 0xe0, 0xe2, 0x77,
	0x02, 0x59, 0xe6, 0x94, 0x5f, 0xe1, 0x0c, 0xb1, 0x4a, 0x48, 0x92, 0x8b, 0x23, 0x39, 0x27, 0xb1,
	0xb8, 0x38, 0x3e, 0x33, 0x45, 0x82, 0x51, 0x81, 0x51, 0x83, 0x33, 0x88, 0x1d, 0xcc, 0xf7, 0x4c,
	0x11, 0xe2, 0xe3, 0x62, 0xca, 0x4c, 0x91, 0x60, 0x02, 0x0b, 0x32, 0x65, 0xa6, 0x08, 0x59, 0x71,
	0xb1, 0x82, 0x0d, 0x93, 0x60, 0x56, 0x60, 0xd4, 0xe0, 0x36, 0x92, 0xd3, 0xc3, 0xe6, 0x3e, 0x3d,
	0x3f, 0xb7, 0x10, 0x4f, 0x90, 0x2a, 0x27, 0x96, 0x13, 0xf7, 0xe4, 0x19, 0x82, 0x20, 0x5a, 0x9c,
	0xfc, 0x4f, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x09, 0x8f,
	0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0xca, 0x34, 0x3d, 0xb3, 0x24,
	0xa3, 0x34, 0x49, 0x2f, 0x39, 0x3f, 0x17, 0xec, 0xf4, 0xe4, 0x7c, 0xa8, 0x1f, 0x40, 0x0c, 0x5d,
	0x88, 0x97, 0xca, 0x4c, 0xf4, 0x2b, 0xe0, 0xfe, 0x2a, 0xa9, 0x2c, 0x48, 0x2d, 0x4e, 0x62, 0x03,
	0xfb, 0xc8, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x2d, 0xbd, 0xf0, 0x4a, 0x53, 0x01, 0x00, 0x00,
}

func (m *BlindBoxContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlindBoxContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlindBoxContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Input.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBlindBoxContent(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintBlindBoxContent(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClassId) > 0 {
		i -= len(m.ClassId)
		copy(dAtA[i:], m.ClassId)
		i = encodeVarintBlindBoxContent(dAtA, i, uint64(len(m.ClassId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBlindBoxContent(dAtA []byte, offset int, v uint64) int {
	offset -= sovBlindBoxContent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BlindBoxContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClassId)
	if l > 0 {
		n += 1 + l + sovBlindBoxContent(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBlindBoxContent(uint64(l))
	}
	l = m.Input.Size()
	n += 1 + l + sovBlindBoxContent(uint64(l))
	return n
}

func sovBlindBoxContent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBlindBoxContent(x uint64) (n int) {
	return sovBlindBoxContent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BlindBoxContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlindBoxContent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlindBoxContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlindBoxContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlindBoxContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlindBoxContent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBlindBoxContent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlindBoxContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlindBoxContent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBlindBoxContent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlindBoxContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlindBoxContent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBlindBoxContent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Input.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlindBoxContent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBlindBoxContent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBlindBoxContent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBlindBoxContent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlindBoxContent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlindBoxContent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBlindBoxContent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBlindBoxContent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBlindBoxContent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBlindBoxContent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBlindBoxContent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBlindBoxContent = fmt.Errorf("proto: unexpected end of group")
)
