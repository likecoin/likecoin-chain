// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: likechain/iscn/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type IscnRecord struct {
	// Using camelCases to make the record JSON in tx more like general JSON documents
	RecordNotes         string   `protobuf:"bytes,1,opt,name=recordNotes,proto3" json:"recordNotes,omitempty"`
	ContentFingerprints []string `protobuf:"bytes,2,rep,name=contentFingerprints,proto3" json:"contentFingerprints,omitempty"`
	// Here, `IscnInput` is JSON encoded bytes
	Stakeholders    []IscnInput `protobuf:"bytes,3,rep,name=stakeholders,proto3,customtype=IscnInput" json:"stakeholders,omitempty"`
	ContentMetadata IscnInput   `protobuf:"bytes,4,opt,name=contentMetadata,proto3,customtype=IscnInput" json:"contentMetadata"`
}

func (m *IscnRecord) Reset()         { *m = IscnRecord{} }
func (m *IscnRecord) String() string { return proto.CompactTextString(m) }
func (*IscnRecord) ProtoMessage()    {}
func (*IscnRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d83c904dc785ba6, []int{0}
}
func (m *IscnRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IscnRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IscnRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IscnRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IscnRecord.Merge(m, src)
}
func (m *IscnRecord) XXX_Size() int {
	return m.Size()
}
func (m *IscnRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_IscnRecord.DiscardUnknown(m)
}

var xxx_messageInfo_IscnRecord proto.InternalMessageInfo

func (m *IscnRecord) GetRecordNotes() string {
	if m != nil {
		return m.RecordNotes
	}
	return ""
}

func (m *IscnRecord) GetContentFingerprints() []string {
	if m != nil {
		return m.ContentFingerprints
	}
	return nil
}

type MsgCreateIscnRecord struct {
	From   string     `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Record IscnRecord `protobuf:"bytes,2,opt,name=record,proto3" json:"record"`
	Nonce  uint64     `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *MsgCreateIscnRecord) Reset()         { *m = MsgCreateIscnRecord{} }
func (m *MsgCreateIscnRecord) String() string { return proto.CompactTextString(m) }
func (*MsgCreateIscnRecord) ProtoMessage()    {}
func (*MsgCreateIscnRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d83c904dc785ba6, []int{1}
}
func (m *MsgCreateIscnRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateIscnRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateIscnRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateIscnRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateIscnRecord.Merge(m, src)
}
func (m *MsgCreateIscnRecord) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateIscnRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateIscnRecord.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateIscnRecord proto.InternalMessageInfo

func (m *MsgCreateIscnRecord) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *MsgCreateIscnRecord) GetRecord() IscnRecord {
	if m != nil {
		return m.Record
	}
	return IscnRecord{}
}

func (m *MsgCreateIscnRecord) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type MsgCreateIscnRecordResponse struct {
	IscnId     string `protobuf:"bytes,1,opt,name=iscn_id,json=iscnId,proto3" json:"iscn_id,omitempty"`
	RecordIpld string `protobuf:"bytes,2,opt,name=record_ipld,json=recordIpld,proto3" json:"record_ipld,omitempty"`
}

func (m *MsgCreateIscnRecordResponse) Reset()         { *m = MsgCreateIscnRecordResponse{} }
func (m *MsgCreateIscnRecordResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateIscnRecordResponse) ProtoMessage()    {}
func (*MsgCreateIscnRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d83c904dc785ba6, []int{2}
}
func (m *MsgCreateIscnRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateIscnRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateIscnRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateIscnRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateIscnRecordResponse.Merge(m, src)
}
func (m *MsgCreateIscnRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateIscnRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateIscnRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateIscnRecordResponse proto.InternalMessageInfo

func (m *MsgCreateIscnRecordResponse) GetIscnId() string {
	if m != nil {
		return m.IscnId
	}
	return ""
}

func (m *MsgCreateIscnRecordResponse) GetRecordIpld() string {
	if m != nil {
		return m.RecordIpld
	}
	return ""
}

type MsgUpdateIscnRecord struct {
	From   string     `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	IscnId string     `protobuf:"bytes,2,opt,name=iscn_id,json=iscnId,proto3" json:"iscn_id,omitempty"`
	Record IscnRecord `protobuf:"bytes,3,opt,name=record,proto3" json:"record"`
}

func (m *MsgUpdateIscnRecord) Reset()         { *m = MsgUpdateIscnRecord{} }
func (m *MsgUpdateIscnRecord) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateIscnRecord) ProtoMessage()    {}
func (*MsgUpdateIscnRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d83c904dc785ba6, []int{3}
}
func (m *MsgUpdateIscnRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateIscnRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateIscnRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateIscnRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateIscnRecord.Merge(m, src)
}
func (m *MsgUpdateIscnRecord) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateIscnRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateIscnRecord.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateIscnRecord proto.InternalMessageInfo

func (m *MsgUpdateIscnRecord) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *MsgUpdateIscnRecord) GetIscnId() string {
	if m != nil {
		return m.IscnId
	}
	return ""
}

func (m *MsgUpdateIscnRecord) GetRecord() IscnRecord {
	if m != nil {
		return m.Record
	}
	return IscnRecord{}
}

type MsgUpdateIscnRecordResponse struct {
	IscnId     string `protobuf:"bytes,1,opt,name=iscn_id,json=iscnId,proto3" json:"iscn_id,omitempty"`
	RecordIpld string `protobuf:"bytes,2,opt,name=record_ipld,json=recordIpld,proto3" json:"record_ipld,omitempty"`
}

func (m *MsgUpdateIscnRecordResponse) Reset()         { *m = MsgUpdateIscnRecordResponse{} }
func (m *MsgUpdateIscnRecordResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateIscnRecordResponse) ProtoMessage()    {}
func (*MsgUpdateIscnRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d83c904dc785ba6, []int{4}
}
func (m *MsgUpdateIscnRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateIscnRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateIscnRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateIscnRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateIscnRecordResponse.Merge(m, src)
}
func (m *MsgUpdateIscnRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateIscnRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateIscnRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateIscnRecordResponse proto.InternalMessageInfo

func (m *MsgUpdateIscnRecordResponse) GetIscnId() string {
	if m != nil {
		return m.IscnId
	}
	return ""
}

func (m *MsgUpdateIscnRecordResponse) GetRecordIpld() string {
	if m != nil {
		return m.RecordIpld
	}
	return ""
}

type MsgChangeIscnRecordOwnership struct {
	From     string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	IscnId   string `protobuf:"bytes,2,opt,name=iscn_id,json=iscnId,proto3" json:"iscn_id,omitempty"`
	NewOwner string `protobuf:"bytes,3,opt,name=new_owner,json=newOwner,proto3" json:"new_owner,omitempty"`
}

func (m *MsgChangeIscnRecordOwnership) Reset()         { *m = MsgChangeIscnRecordOwnership{} }
func (m *MsgChangeIscnRecordOwnership) String() string { return proto.CompactTextString(m) }
func (*MsgChangeIscnRecordOwnership) ProtoMessage()    {}
func (*MsgChangeIscnRecordOwnership) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d83c904dc785ba6, []int{5}
}
func (m *MsgChangeIscnRecordOwnership) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgChangeIscnRecordOwnership) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgChangeIscnRecordOwnership.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgChangeIscnRecordOwnership) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgChangeIscnRecordOwnership.Merge(m, src)
}
func (m *MsgChangeIscnRecordOwnership) XXX_Size() int {
	return m.Size()
}
func (m *MsgChangeIscnRecordOwnership) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgChangeIscnRecordOwnership.DiscardUnknown(m)
}

var xxx_messageInfo_MsgChangeIscnRecordOwnership proto.InternalMessageInfo

func (m *MsgChangeIscnRecordOwnership) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *MsgChangeIscnRecordOwnership) GetIscnId() string {
	if m != nil {
		return m.IscnId
	}
	return ""
}

func (m *MsgChangeIscnRecordOwnership) GetNewOwner() string {
	if m != nil {
		return m.NewOwner
	}
	return ""
}

type MsgChangeIscnRecordOwnershipResponse struct {
}

func (m *MsgChangeIscnRecordOwnershipResponse) Reset()         { *m = MsgChangeIscnRecordOwnershipResponse{} }
func (m *MsgChangeIscnRecordOwnershipResponse) String() string { return proto.CompactTextString(m) }
func (*MsgChangeIscnRecordOwnershipResponse) ProtoMessage()    {}
func (*MsgChangeIscnRecordOwnershipResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d83c904dc785ba6, []int{6}
}
func (m *MsgChangeIscnRecordOwnershipResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgChangeIscnRecordOwnershipResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgChangeIscnRecordOwnershipResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgChangeIscnRecordOwnershipResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgChangeIscnRecordOwnershipResponse.Merge(m, src)
}
func (m *MsgChangeIscnRecordOwnershipResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgChangeIscnRecordOwnershipResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgChangeIscnRecordOwnershipResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgChangeIscnRecordOwnershipResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*IscnRecord)(nil), "likechain.iscn.IscnRecord")
	proto.RegisterType((*MsgCreateIscnRecord)(nil), "likechain.iscn.MsgCreateIscnRecord")
	proto.RegisterType((*MsgCreateIscnRecordResponse)(nil), "likechain.iscn.MsgCreateIscnRecordResponse")
	proto.RegisterType((*MsgUpdateIscnRecord)(nil), "likechain.iscn.MsgUpdateIscnRecord")
	proto.RegisterType((*MsgUpdateIscnRecordResponse)(nil), "likechain.iscn.MsgUpdateIscnRecordResponse")
	proto.RegisterType((*MsgChangeIscnRecordOwnership)(nil), "likechain.iscn.MsgChangeIscnRecordOwnership")
	proto.RegisterType((*MsgChangeIscnRecordOwnershipResponse)(nil), "likechain.iscn.MsgChangeIscnRecordOwnershipResponse")
}

func init() { proto.RegisterFile("likechain/iscn/tx.proto", fileDescriptor_1d83c904dc785ba6) }

var fileDescriptor_1d83c904dc785ba6 = []byte{
	// 518 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xdf, 0x8a, 0xd3, 0x40,
	0x14, 0xc6, 0x9b, 0xa6, 0x56, 0x73, 0xb6, 0xea, 0x3a, 0xbb, 0xb0, 0xb1, 0x2b, 0x69, 0xa8, 0x22,
	0x01, 0x35, 0xd1, 0xba, 0x17, 0x82, 0x77, 0x15, 0x84, 0x82, 0x55, 0x08, 0x88, 0xe0, 0x4d, 0xc9,
	0x26, 0x63, 0x32, 0x6c, 0x77, 0x66, 0x98, 0x99, 0xb5, 0xbb, 0x20, 0xf8, 0x0a, 0x3e, 0xd6, 0x5e,
	0x16, 0xaf, 0xc4, 0x8b, 0x45, 0xda, 0x17, 0x91, 0xfc, 0x69, 0xb7, 0xed, 0xa6, 0x6a, 0xc1, 0xbb,
	0x93, 0x39, 0xdf, 0x9c, 0xef, 0xfc, 0xce, 0x84, 0x03, 0x7b, 0x43, 0x72, 0x84, 0xc3, 0x24, 0x20,
	0xd4, 0x23, 0x32, 0xa4, 0x9e, 0x3a, 0x75, 0xb9, 0x60, 0x8a, 0xa1, 0x5b, 0xf3, 0x84, 0x9b, 0x26,
	0x9a, 0xbb, 0x31, 0x8b, 0x59, 0x96, 0xf2, 0xd2, 0x28, 0x57, 0xb5, 0xc7, 0x1a, 0x40, 0x4f, 0x86,
	0xd4, 0xc7, 0x21, 0x13, 0x11, 0xb2, 0x61, 0x4b, 0x64, 0xd1, 0x5b, 0xa6, 0xb0, 0x34, 0x35, 0x5b,
	0x73, 0x0c, 0x7f, 0xf1, 0x08, 0x3d, 0x85, 0x9d, 0x90, 0x51, 0x85, 0xa9, 0x7a, 0x4d, 0x68, 0x8c,
	0x05, 0x17, 0x84, 0x2a, 0x69, 0x56, 0x6d, 0xdd, 0x31, 0xfc, 0xb2, 0x14, 0x7a, 0x06, 0x0d, 0xa9,
	0x82, 0x23, 0x9c, 0xb0, 0x61, 0x84, 0x85, 0x34, 0x75, 0x5b, 0x77, 0x1a, 0xdd, 0x9b, 0x3f, 0x2f,
	0x5a, 0x46, 0xea, 0xdc, 0xa3, 0xfc, 0x44, 0xf9, 0x4b, 0x12, 0xf4, 0x12, 0x6e, 0x17, 0x95, 0xfa,
	0x58, 0x05, 0x51, 0xa0, 0x02, 0xb3, 0x66, 0x6b, 0x4e, 0xa3, 0x7b, 0xe7, 0xfc, 0xa2, 0x55, 0x59,
	0xbe, 0xb9, 0xaa, 0x6c, 0x9f, 0xc1, 0x4e, 0x5f, 0xc6, 0xaf, 0x04, 0x0e, 0x14, 0x5e, 0x40, 0x43,
	0x50, 0xfb, 0x24, 0xd8, 0x71, 0xc1, 0x94, 0xc5, 0xe8, 0x05, 0xd4, 0x73, 0x36, 0xb3, 0x6a, 0x6b,
	0xce, 0x56, 0xa7, 0xe9, 0x2e, 0x0f, 0xcd, 0xbd, 0xbc, 0xdf, 0xad, 0xa5, 0xd6, 0x7e, 0xa1, 0x47,
	0xbb, 0x70, 0x8d, 0x32, 0x1a, 0x62, 0x53, 0xb7, 0x35, 0xa7, 0xe6, 0xe7, 0x1f, 0xed, 0x0f, 0xb0,
	0x5f, 0x62, 0xed, 0x63, 0xc9, 0x19, 0x95, 0x18, 0xed, 0xc1, 0xf5, 0xb4, 0xea, 0x80, 0x44, 0x45,
	0x17, 0xf5, 0xf4, 0xb3, 0x17, 0xa1, 0xd6, 0x6c, 0xec, 0x03, 0xc2, 0x87, 0x79, 0x33, 0x86, 0x0f,
	0xf9, 0x51, 0x8f, 0x0f, 0xa3, 0xf6, 0x97, 0x8c, 0xe9, 0x3d, 0x8f, 0xfe, 0xce, 0xb4, 0x60, 0x52,
	0x5d, 0x32, 0xb9, 0x84, 0xd5, 0x37, 0x83, 0x2d, 0xb0, 0x56, 0xdd, 0xff, 0x03, 0x56, 0x02, 0xf7,
	0xd2, 0x79, 0x25, 0x01, 0x8d, 0x17, 0x0a, 0xbf, 0x1b, 0x51, 0x2c, 0x64, 0x42, 0xf8, 0x66, 0x7c,
	0xfb, 0x60, 0x50, 0x3c, 0x1a, 0xb0, 0xf4, 0x76, 0x86, 0x68, 0xf8, 0x37, 0x28, 0x1e, 0x65, 0xd5,
	0xda, 0x0f, 0xe1, 0xc1, 0x9f, 0x9c, 0x66, 0x2c, 0x9d, 0xef, 0x55, 0xd0, 0xfb, 0x32, 0x46, 0x11,
	0x6c, 0x5f, 0xf9, 0x83, 0xee, 0xaf, 0x0e, 0xac, 0xe4, 0xad, 0x9b, 0x8f, 0xfe, 0x41, 0x34, 0x9f,
	0x5c, 0x04, 0xdb, 0x57, 0xde, 0xb4, 0xcc, 0x65, 0x55, 0x54, 0xea, 0xb2, 0xf6, 0x7d, 0xbe, 0xc2,
	0xdd, 0xf5, 0x23, 0x7e, 0x5c, 0xd6, 0xef, 0x3a, 0x75, 0xf3, 0x60, 0x13, 0xf5, 0xac, 0x81, 0xee,
	0x9b, 0xf3, 0x89, 0xa5, 0x8d, 0x27, 0x96, 0xf6, 0x6b, 0x62, 0x69, 0xdf, 0xa6, 0x56, 0x65, 0x3c,
	0xb5, 0x2a, 0x3f, 0xa6, 0x56, 0xe5, 0x63, 0x27, 0x26, 0x2a, 0x39, 0x39, 0x74, 0x43, 0x76, 0xec,
	0x65, 0x95, 0x19, 0xa1, 0xf3, 0xe0, 0x49, 0xbe, 0xd6, 0x3e, 0x1f, 0x78, 0xa7, 0xc5, 0x6e, 0x3b,
	0xe3, 0x58, 0x1e, 0xd6, 0xb3, 0xcd, 0xf5, 0xfc, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x82, 0x90,
	0xdb, 0x52, 0xfa, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// CreateIscnRecord defines a method to create ISCN metadata
	CreateIscnRecord(ctx context.Context, in *MsgCreateIscnRecord, opts ...grpc.CallOption) (*MsgCreateIscnRecordResponse, error)
	// UpdateIscnRecord defines a method to update existing ISCN metadata
	UpdateIscnRecord(ctx context.Context, in *MsgUpdateIscnRecord, opts ...grpc.CallOption) (*MsgUpdateIscnRecordResponse, error)
	// ChangeIscnRecordOwnership defines a method to update the ownership of existing ISCN metadata
	ChangeIscnRecordOwnership(ctx context.Context, in *MsgChangeIscnRecordOwnership, opts ...grpc.CallOption) (*MsgChangeIscnRecordOwnershipResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateIscnRecord(ctx context.Context, in *MsgCreateIscnRecord, opts ...grpc.CallOption) (*MsgCreateIscnRecordResponse, error) {
	out := new(MsgCreateIscnRecordResponse)
	err := c.cc.Invoke(ctx, "/likechain.iscn.Msg/CreateIscnRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateIscnRecord(ctx context.Context, in *MsgUpdateIscnRecord, opts ...grpc.CallOption) (*MsgUpdateIscnRecordResponse, error) {
	out := new(MsgUpdateIscnRecordResponse)
	err := c.cc.Invoke(ctx, "/likechain.iscn.Msg/UpdateIscnRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ChangeIscnRecordOwnership(ctx context.Context, in *MsgChangeIscnRecordOwnership, opts ...grpc.CallOption) (*MsgChangeIscnRecordOwnershipResponse, error) {
	out := new(MsgChangeIscnRecordOwnershipResponse)
	err := c.cc.Invoke(ctx, "/likechain.iscn.Msg/ChangeIscnRecordOwnership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// CreateIscnRecord defines a method to create ISCN metadata
	CreateIscnRecord(context.Context, *MsgCreateIscnRecord) (*MsgCreateIscnRecordResponse, error)
	// UpdateIscnRecord defines a method to update existing ISCN metadata
	UpdateIscnRecord(context.Context, *MsgUpdateIscnRecord) (*MsgUpdateIscnRecordResponse, error)
	// ChangeIscnRecordOwnership defines a method to update the ownership of existing ISCN metadata
	ChangeIscnRecordOwnership(context.Context, *MsgChangeIscnRecordOwnership) (*MsgChangeIscnRecordOwnershipResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateIscnRecord(ctx context.Context, req *MsgCreateIscnRecord) (*MsgCreateIscnRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIscnRecord not implemented")
}
func (*UnimplementedMsgServer) UpdateIscnRecord(ctx context.Context, req *MsgUpdateIscnRecord) (*MsgUpdateIscnRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIscnRecord not implemented")
}
func (*UnimplementedMsgServer) ChangeIscnRecordOwnership(ctx context.Context, req *MsgChangeIscnRecordOwnership) (*MsgChangeIscnRecordOwnershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeIscnRecordOwnership not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateIscnRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateIscnRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateIscnRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/likechain.iscn.Msg/CreateIscnRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateIscnRecord(ctx, req.(*MsgCreateIscnRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateIscnRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateIscnRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateIscnRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/likechain.iscn.Msg/UpdateIscnRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateIscnRecord(ctx, req.(*MsgUpdateIscnRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ChangeIscnRecordOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgChangeIscnRecordOwnership)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ChangeIscnRecordOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/likechain.iscn.Msg/ChangeIscnRecordOwnership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ChangeIscnRecordOwnership(ctx, req.(*MsgChangeIscnRecordOwnership))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "likechain.iscn.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIscnRecord",
			Handler:    _Msg_CreateIscnRecord_Handler,
		},
		{
			MethodName: "UpdateIscnRecord",
			Handler:    _Msg_UpdateIscnRecord_Handler,
		},
		{
			MethodName: "ChangeIscnRecordOwnership",
			Handler:    _Msg_ChangeIscnRecordOwnership_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "likechain/iscn/tx.proto",
}

func (m *IscnRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IscnRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IscnRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ContentMetadata.Size()
		i -= size
		if _, err := m.ContentMetadata.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Stakeholders) > 0 {
		for iNdEx := len(m.Stakeholders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.Stakeholders[iNdEx].Size()
				i -= size
				if _, err := m.Stakeholders[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ContentFingerprints) > 0 {
		for iNdEx := len(m.ContentFingerprints) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ContentFingerprints[iNdEx])
			copy(dAtA[i:], m.ContentFingerprints[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.ContentFingerprints[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.RecordNotes) > 0 {
		i -= len(m.RecordNotes)
		copy(dAtA[i:], m.RecordNotes)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RecordNotes)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateIscnRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateIscnRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateIscnRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.Record.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateIscnRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateIscnRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateIscnRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RecordIpld) > 0 {
		i -= len(m.RecordIpld)
		copy(dAtA[i:], m.RecordIpld)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RecordIpld)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.IscnId) > 0 {
		i -= len(m.IscnId)
		copy(dAtA[i:], m.IscnId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.IscnId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateIscnRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateIscnRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateIscnRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Record.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.IscnId) > 0 {
		i -= len(m.IscnId)
		copy(dAtA[i:], m.IscnId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.IscnId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateIscnRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateIscnRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateIscnRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RecordIpld) > 0 {
		i -= len(m.RecordIpld)
		copy(dAtA[i:], m.RecordIpld)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RecordIpld)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.IscnId) > 0 {
		i -= len(m.IscnId)
		copy(dAtA[i:], m.IscnId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.IscnId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgChangeIscnRecordOwnership) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChangeIscnRecordOwnership) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgChangeIscnRecordOwnership) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewOwner) > 0 {
		i -= len(m.NewOwner)
		copy(dAtA[i:], m.NewOwner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewOwner)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.IscnId) > 0 {
		i -= len(m.IscnId)
		copy(dAtA[i:], m.IscnId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.IscnId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgChangeIscnRecordOwnershipResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChangeIscnRecordOwnershipResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgChangeIscnRecordOwnershipResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IscnRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RecordNotes)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.ContentFingerprints) > 0 {
		for _, s := range m.ContentFingerprints {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Stakeholders) > 0 {
		for _, e := range m.Stakeholders {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = m.ContentMetadata.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgCreateIscnRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Record.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.Nonce != 0 {
		n += 1 + sovTx(uint64(m.Nonce))
	}
	return n
}

func (m *MsgCreateIscnRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IscnId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RecordIpld)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateIscnRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.IscnId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Record.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateIscnRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IscnId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RecordIpld)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgChangeIscnRecordOwnership) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.IscnId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewOwner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgChangeIscnRecordOwnershipResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IscnRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IscnRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IscnRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordNotes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordNotes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentFingerprints", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentFingerprints = append(m.ContentFingerprints, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stakeholders", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v IscnInput
			m.Stakeholders = append(m.Stakeholders, v)
			if err := m.Stakeholders[len(m.Stakeholders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentMetadata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ContentMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateIscnRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateIscnRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateIscnRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateIscnRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateIscnRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateIscnRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IscnId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IscnId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordIpld", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordIpld = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateIscnRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateIscnRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateIscnRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IscnId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IscnId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateIscnRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateIscnRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateIscnRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IscnId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IscnId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordIpld", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordIpld = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChangeIscnRecordOwnership) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChangeIscnRecordOwnership: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChangeIscnRecordOwnership: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IscnId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IscnId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChangeIscnRecordOwnershipResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChangeIscnRecordOwnershipResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChangeIscnRecordOwnershipResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
