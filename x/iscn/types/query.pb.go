// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: likechain/iscn/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryResponseRecord struct {
	Ipld string    `protobuf:"bytes,1,opt,name=ipld,proto3" json:"ipld,omitempty"`
	Data IscnInput `protobuf:"bytes,2,opt,name=data,proto3,customtype=IscnInput" json:"data"`
}

func (m *QueryResponseRecord) Reset()         { *m = QueryResponseRecord{} }
func (m *QueryResponseRecord) String() string { return proto.CompactTextString(m) }
func (*QueryResponseRecord) ProtoMessage()    {}
func (*QueryResponseRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_30477fb2f7bdc5a8, []int{0}
}
func (m *QueryResponseRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryResponseRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryResponseRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryResponseRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryResponseRecord.Merge(m, src)
}
func (m *QueryResponseRecord) XXX_Size() int {
	return m.Size()
}
func (m *QueryResponseRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryResponseRecord.DiscardUnknown(m)
}

var xxx_messageInfo_QueryResponseRecord proto.InternalMessageInfo

func (m *QueryResponseRecord) GetIpld() string {
	if m != nil {
		return m.Ipld
	}
	return ""
}

type QueryRecordsByIdRequest struct {
	// The ISCN ID of the record(s) to be queried.
	// Format: iscn://REGISTRY_NAME/CONTENT_ID[/VERSION]
	// If version part omitted, version is default to 0.
	// if non-zero version exists, then from_version and to_version are ignored.
	IscnId string `protobuf:"bytes,1,opt,name=iscn_id,json=iscnId,proto3" json:"iscn_id,omitempty"`
	// The initial version in the resulting records.
	// If omitted or is 0, then it will be interpreted as the latest version.
	FromVersion uint64 `protobuf:"varint,2,opt,name=from_version,json=fromVersion,proto3" json:"from_version,omitempty"`
	// The final version in the resulting records.
	// If omitted or is 0, then it will be interpreted as the latest version.
	ToVersion uint64 `protobuf:"varint,3,opt,name=to_version,json=toVersion,proto3" json:"to_version,omitempty"`
}

func (m *QueryRecordsByIdRequest) Reset()         { *m = QueryRecordsByIdRequest{} }
func (m *QueryRecordsByIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRecordsByIdRequest) ProtoMessage()    {}
func (*QueryRecordsByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_30477fb2f7bdc5a8, []int{1}
}
func (m *QueryRecordsByIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRecordsByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRecordsByIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRecordsByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRecordsByIdRequest.Merge(m, src)
}
func (m *QueryRecordsByIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRecordsByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRecordsByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRecordsByIdRequest proto.InternalMessageInfo

func (m *QueryRecordsByIdRequest) GetIscnId() string {
	if m != nil {
		return m.IscnId
	}
	return ""
}

func (m *QueryRecordsByIdRequest) GetFromVersion() uint64 {
	if m != nil {
		return m.FromVersion
	}
	return 0
}

func (m *QueryRecordsByIdRequest) GetToVersion() uint64 {
	if m != nil {
		return m.ToVersion
	}
	return 0
}

type QueryRecordsByIdResponse struct {
	Owner         string                `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	LatestVersion uint64                `protobuf:"varint,2,opt,name=latest_version,json=latestVersion,proto3" json:"latest_version,omitempty"`
	Records       []QueryResponseRecord `protobuf:"bytes,3,rep,name=records,proto3" json:"records"`
}

func (m *QueryRecordsByIdResponse) Reset()         { *m = QueryRecordsByIdResponse{} }
func (m *QueryRecordsByIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRecordsByIdResponse) ProtoMessage()    {}
func (*QueryRecordsByIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_30477fb2f7bdc5a8, []int{2}
}
func (m *QueryRecordsByIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRecordsByIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRecordsByIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRecordsByIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRecordsByIdResponse.Merge(m, src)
}
func (m *QueryRecordsByIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRecordsByIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRecordsByIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRecordsByIdResponse proto.InternalMessageInfo

func (m *QueryRecordsByIdResponse) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *QueryRecordsByIdResponse) GetLatestVersion() uint64 {
	if m != nil {
		return m.LatestVersion
	}
	return 0
}

func (m *QueryRecordsByIdResponse) GetRecords() []QueryResponseRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

type QueryRecordsByFingerprintRequest struct {
	// The fingerprint of the record(s) to be queried.
	// All fingerprints in records should be URIs.
	Fingerprint string `protobuf:"bytes,1,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
	// For pagination.
	// For the first query, fill in 0 or just omit this field.
	// For continuous queries, fill in the `next_sequence` field in the previous response.
	FromSequence uint64 `protobuf:"varint,2,opt,name=from_sequence,json=fromSequence,proto3" json:"from_sequence,omitempty"`
}

func (m *QueryRecordsByFingerprintRequest) Reset()         { *m = QueryRecordsByFingerprintRequest{} }
func (m *QueryRecordsByFingerprintRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRecordsByFingerprintRequest) ProtoMessage()    {}
func (*QueryRecordsByFingerprintRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_30477fb2f7bdc5a8, []int{3}
}
func (m *QueryRecordsByFingerprintRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRecordsByFingerprintRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRecordsByFingerprintRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRecordsByFingerprintRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRecordsByFingerprintRequest.Merge(m, src)
}
func (m *QueryRecordsByFingerprintRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRecordsByFingerprintRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRecordsByFingerprintRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRecordsByFingerprintRequest proto.InternalMessageInfo

func (m *QueryRecordsByFingerprintRequest) GetFingerprint() string {
	if m != nil {
		return m.Fingerprint
	}
	return ""
}

func (m *QueryRecordsByFingerprintRequest) GetFromSequence() uint64 {
	if m != nil {
		return m.FromSequence
	}
	return 0
}

type QueryRecordsByFingerprintResponse struct {
	Records []QueryResponseRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records"`
	// For pagination.
	NextSequence uint64 `protobuf:"varint,2,opt,name=next_sequence,json=nextSequence,proto3" json:"next_sequence,omitempty"`
}

func (m *QueryRecordsByFingerprintResponse) Reset()         { *m = QueryRecordsByFingerprintResponse{} }
func (m *QueryRecordsByFingerprintResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRecordsByFingerprintResponse) ProtoMessage()    {}
func (*QueryRecordsByFingerprintResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_30477fb2f7bdc5a8, []int{4}
}
func (m *QueryRecordsByFingerprintResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRecordsByFingerprintResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRecordsByFingerprintResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRecordsByFingerprintResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRecordsByFingerprintResponse.Merge(m, src)
}
func (m *QueryRecordsByFingerprintResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRecordsByFingerprintResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRecordsByFingerprintResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRecordsByFingerprintResponse proto.InternalMessageInfo

func (m *QueryRecordsByFingerprintResponse) GetRecords() []QueryResponseRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *QueryRecordsByFingerprintResponse) GetNextSequence() uint64 {
	if m != nil {
		return m.NextSequence
	}
	return 0
}

type QueryRecordsByOwnerRequest struct {
	// Owner address of the record(s) to be queried.
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// For pagination.
	// For the first query, fill in 0 or just omit this field.
	// For continuous queries, fill in the `next_sequence` field in the previous response.
	FromSequence uint64 `protobuf:"varint,2,opt,name=from_sequence,json=fromSequence,proto3" json:"from_sequence,omitempty"`
}

func (m *QueryRecordsByOwnerRequest) Reset()         { *m = QueryRecordsByOwnerRequest{} }
func (m *QueryRecordsByOwnerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRecordsByOwnerRequest) ProtoMessage()    {}
func (*QueryRecordsByOwnerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_30477fb2f7bdc5a8, []int{5}
}
func (m *QueryRecordsByOwnerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRecordsByOwnerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRecordsByOwnerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRecordsByOwnerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRecordsByOwnerRequest.Merge(m, src)
}
func (m *QueryRecordsByOwnerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRecordsByOwnerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRecordsByOwnerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRecordsByOwnerRequest proto.InternalMessageInfo

func (m *QueryRecordsByOwnerRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *QueryRecordsByOwnerRequest) GetFromSequence() uint64 {
	if m != nil {
		return m.FromSequence
	}
	return 0
}

type QueryRecordsByOwnerResponse struct {
	Records      []QueryResponseRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records"`
	NextSequence uint64                `protobuf:"varint,2,opt,name=next_sequence,json=nextSequence,proto3" json:"next_sequence,omitempty"`
}

func (m *QueryRecordsByOwnerResponse) Reset()         { *m = QueryRecordsByOwnerResponse{} }
func (m *QueryRecordsByOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRecordsByOwnerResponse) ProtoMessage()    {}
func (*QueryRecordsByOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_30477fb2f7bdc5a8, []int{6}
}
func (m *QueryRecordsByOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRecordsByOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRecordsByOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRecordsByOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRecordsByOwnerResponse.Merge(m, src)
}
func (m *QueryRecordsByOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRecordsByOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRecordsByOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRecordsByOwnerResponse proto.InternalMessageInfo

func (m *QueryRecordsByOwnerResponse) GetRecords() []QueryResponseRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *QueryRecordsByOwnerResponse) GetNextSequence() uint64 {
	if m != nil {
		return m.NextSequence
	}
	return 0
}

type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_30477fb2f7bdc5a8, []int{7}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_30477fb2f7bdc5a8, []int{8}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetCidRequest struct {
	Cid string `protobuf:"bytes,1,opt,name=cid,proto3" json:"cid,omitempty"`
}

func (m *QueryGetCidRequest) Reset()         { *m = QueryGetCidRequest{} }
func (m *QueryGetCidRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCidRequest) ProtoMessage()    {}
func (*QueryGetCidRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_30477fb2f7bdc5a8, []int{9}
}
func (m *QueryGetCidRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCidRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCidRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCidRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCidRequest.Merge(m, src)
}
func (m *QueryGetCidRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCidRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCidRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCidRequest proto.InternalMessageInfo

func (m *QueryGetCidRequest) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

type QueryGetCidResponse struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *QueryGetCidResponse) Reset()         { *m = QueryGetCidResponse{} }
func (m *QueryGetCidResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCidResponse) ProtoMessage()    {}
func (*QueryGetCidResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_30477fb2f7bdc5a8, []int{10}
}
func (m *QueryGetCidResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCidResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCidResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCidResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCidResponse.Merge(m, src)
}
func (m *QueryGetCidResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCidResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCidResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCidResponse proto.InternalMessageInfo

func (m *QueryGetCidResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryGetCidSizeRequest struct {
	Cid string `protobuf:"bytes,1,opt,name=cid,proto3" json:"cid,omitempty"`
}

func (m *QueryGetCidSizeRequest) Reset()         { *m = QueryGetCidSizeRequest{} }
func (m *QueryGetCidSizeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCidSizeRequest) ProtoMessage()    {}
func (*QueryGetCidSizeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_30477fb2f7bdc5a8, []int{11}
}
func (m *QueryGetCidSizeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCidSizeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCidSizeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCidSizeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCidSizeRequest.Merge(m, src)
}
func (m *QueryGetCidSizeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCidSizeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCidSizeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCidSizeRequest proto.InternalMessageInfo

func (m *QueryGetCidSizeRequest) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

type QueryGetCidSizeResponse struct {
	Size_ uint64 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
}

func (m *QueryGetCidSizeResponse) Reset()         { *m = QueryGetCidSizeResponse{} }
func (m *QueryGetCidSizeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCidSizeResponse) ProtoMessage()    {}
func (*QueryGetCidSizeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_30477fb2f7bdc5a8, []int{12}
}
func (m *QueryGetCidSizeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCidSizeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCidSizeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCidSizeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCidSizeResponse.Merge(m, src)
}
func (m *QueryGetCidSizeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCidSizeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCidSizeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCidSizeResponse proto.InternalMessageInfo

func (m *QueryGetCidSizeResponse) GetSize_() uint64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

type QueryHasCidRequest struct {
	Cid string `protobuf:"bytes,1,opt,name=cid,proto3" json:"cid,omitempty"`
}

func (m *QueryHasCidRequest) Reset()         { *m = QueryHasCidRequest{} }
func (m *QueryHasCidRequest) String() string { return proto.CompactTextString(m) }
func (*QueryHasCidRequest) ProtoMessage()    {}
func (*QueryHasCidRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_30477fb2f7bdc5a8, []int{13}
}
func (m *QueryHasCidRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHasCidRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHasCidRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHasCidRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHasCidRequest.Merge(m, src)
}
func (m *QueryHasCidRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryHasCidRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHasCidRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHasCidRequest proto.InternalMessageInfo

func (m *QueryHasCidRequest) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

type QueryHasCidResponse struct {
	Exist bool `protobuf:"varint,1,opt,name=exist,proto3" json:"exist,omitempty"`
}

func (m *QueryHasCidResponse) Reset()         { *m = QueryHasCidResponse{} }
func (m *QueryHasCidResponse) String() string { return proto.CompactTextString(m) }
func (*QueryHasCidResponse) ProtoMessage()    {}
func (*QueryHasCidResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_30477fb2f7bdc5a8, []int{14}
}
func (m *QueryHasCidResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHasCidResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHasCidResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHasCidResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHasCidResponse.Merge(m, src)
}
func (m *QueryHasCidResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryHasCidResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHasCidResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHasCidResponse proto.InternalMessageInfo

func (m *QueryHasCidResponse) GetExist() bool {
	if m != nil {
		return m.Exist
	}
	return false
}

func init() {
	proto.RegisterType((*QueryResponseRecord)(nil), "likechain.iscn.QueryResponseRecord")
	proto.RegisterType((*QueryRecordsByIdRequest)(nil), "likechain.iscn.QueryRecordsByIdRequest")
	proto.RegisterType((*QueryRecordsByIdResponse)(nil), "likechain.iscn.QueryRecordsByIdResponse")
	proto.RegisterType((*QueryRecordsByFingerprintRequest)(nil), "likechain.iscn.QueryRecordsByFingerprintRequest")
	proto.RegisterType((*QueryRecordsByFingerprintResponse)(nil), "likechain.iscn.QueryRecordsByFingerprintResponse")
	proto.RegisterType((*QueryRecordsByOwnerRequest)(nil), "likechain.iscn.QueryRecordsByOwnerRequest")
	proto.RegisterType((*QueryRecordsByOwnerResponse)(nil), "likechain.iscn.QueryRecordsByOwnerResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "likechain.iscn.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "likechain.iscn.QueryParamsResponse")
	proto.RegisterType((*QueryGetCidRequest)(nil), "likechain.iscn.QueryGetCidRequest")
	proto.RegisterType((*QueryGetCidResponse)(nil), "likechain.iscn.QueryGetCidResponse")
	proto.RegisterType((*QueryGetCidSizeRequest)(nil), "likechain.iscn.QueryGetCidSizeRequest")
	proto.RegisterType((*QueryGetCidSizeResponse)(nil), "likechain.iscn.QueryGetCidSizeResponse")
	proto.RegisterType((*QueryHasCidRequest)(nil), "likechain.iscn.QueryHasCidRequest")
	proto.RegisterType((*QueryHasCidResponse)(nil), "likechain.iscn.QueryHasCidResponse")
}

func init() { proto.RegisterFile("likechain/iscn/query.proto", fileDescriptor_30477fb2f7bdc5a8) }

var fileDescriptor_30477fb2f7bdc5a8 = []byte{
	// 804 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0xcf, 0x4f, 0x1b, 0x47,
	0x14, 0xf6, 0x62, 0x63, 0xca, 0x18, 0x10, 0x1d, 0x5c, 0x70, 0xd7, 0xad, 0x31, 0x8b, 0x00, 0x17,
	0x84, 0xb7, 0x75, 0xf9, 0x0b, 0x8c, 0xd4, 0xd6, 0x6a, 0xa5, 0xd2, 0x45, 0x6a, 0xa5, 0x5e, 0xac,
	0x65, 0x77, 0x30, 0x23, 0xcc, 0xcc, 0xb2, 0x33, 0x26, 0x40, 0x14, 0x45, 0xca, 0x21, 0x39, 0x45,
	0x8a, 0x94, 0x6b, 0x94, 0xbf, 0x87, 0x23, 0x52, 0x2e, 0x51, 0x0e, 0x28, 0x82, 0xfc, 0x17, 0xb9,
	0x44, 0xf3, 0x63, 0xed, 0x5d, 0x63, 0x1b, 0x92, 0x43, 0x6e, 0xb3, 0xef, 0x7d, 0xfb, 0xbe, 0xef,
	0xbd, 0x79, 0xdf, 0x6a, 0x81, 0xd9, 0xc6, 0x87, 0xc8, 0x3b, 0x70, 0x31, 0xb1, 0x31, 0xf3, 0x88,
	0x7d, 0xdc, 0x41, 0xe1, 0x59, 0x35, 0x08, 0x29, 0xa7, 0x70, 0xa6, 0x9b, 0xab, 0x8a, 0x9c, 0x99,
	0x6f, 0xd1, 0x16, 0x95, 0x29, 0x5b, 0x9c, 0x14, 0xca, 0xfc, 0xa1, 0x45, 0x69, 0xab, 0x8d, 0x6c,
	0x37, 0xc0, 0xb6, 0x4b, 0x08, 0xe5, 0x2e, 0xc7, 0x94, 0x30, 0x9d, 0x2d, 0xf6, 0xd5, 0x0f, 0xdc,
	0xd0, 0x3d, 0xd2, 0x49, 0x6b, 0x07, 0xcc, 0xfd, 0x23, 0xf8, 0x1c, 0xc4, 0x02, 0x4a, 0x18, 0x72,
	0x90, 0x47, 0x43, 0x1f, 0x42, 0x90, 0xc1, 0x41, 0xdb, 0x2f, 0x18, 0x65, 0xa3, 0x32, 0xe9, 0xc8,
	0x33, 0x5c, 0x01, 0x19, 0xdf, 0xe5, 0x6e, 0x61, 0xac, 0x6c, 0x54, 0xa6, 0xea, 0xdf, 0x5e, 0x5c,
	0x2d, 0xa6, 0xde, 0x5d, 0x2d, 0x4e, 0x36, 0x98, 0x47, 0x1a, 0x24, 0xe8, 0x70, 0x47, 0xa6, 0x2d,
	0x0e, 0x16, 0x74, 0x45, 0x51, 0x89, 0xd5, 0xcf, 0x1a, 0xbe, 0x83, 0x8e, 0x3b, 0x88, 0x71, 0xb8,
	0x00, 0x26, 0x84, 0x82, 0x26, 0x8e, 0x0a, 0x67, 0xc5, 0x63, 0xc3, 0x87, 0x4b, 0x60, 0x6a, 0x3f,
	0xa4, 0x47, 0xcd, 0x13, 0x14, 0x32, 0x4c, 0x89, 0xa4, 0xc8, 0x38, 0x39, 0x11, 0xfb, 0x57, 0x85,
	0xe0, 0x8f, 0x00, 0x70, 0xda, 0x05, 0xa4, 0x25, 0x60, 0x92, 0x53, 0x9d, 0xb6, 0x5e, 0x19, 0xa0,
	0x70, 0x9b, 0x56, 0xf5, 0x04, 0xf3, 0x60, 0x9c, 0x3e, 0x20, 0x28, 0xd4, 0xac, 0xea, 0x01, 0xae,
	0x80, 0x99, 0xb6, 0xcb, 0x11, 0xe3, 0x7d, 0xb4, 0xd3, 0x2a, 0x1a, 0x11, 0x6f, 0x83, 0x89, 0x50,
	0xd5, 0x2c, 0xa4, 0xcb, 0xe9, 0x4a, 0xae, 0xb6, 0x5c, 0x4d, 0x5e, 0x4a, 0x75, 0xc0, 0x00, 0xeb,
	0x19, 0x31, 0x1e, 0x27, 0x7a, 0xd3, 0xc2, 0xa0, 0x9c, 0x54, 0xf7, 0x1b, 0x26, 0x2d, 0x14, 0x06,
	0x21, 0x26, 0x3c, 0x9a, 0x4e, 0x19, 0xe4, 0xf6, 0x7b, 0x51, 0xad, 0x35, 0x1e, 0x82, 0xcb, 0x60,
	0x5a, 0x8e, 0x89, 0x89, 0x37, 0x88, 0x87, 0xb4, 0x60, 0x39, 0xbb, 0x5d, 0x1d, 0xb3, 0x9e, 0x1b,
	0x60, 0x69, 0x04, 0x97, 0x1e, 0x49, 0xac, 0x2b, 0xe3, 0x4b, 0xbb, 0x12, 0x7a, 0x08, 0x3a, 0xe5,
	0xb7, 0xf4, 0x88, 0x60, 0x57, 0xcf, 0x7f, 0xc0, 0x4c, 0xca, 0xf9, 0x5b, 0x4c, 0x3f, 0x6a, 0x7a,
	0xf0, 0xd5, 0xdc, 0xab, 0xd1, 0x67, 0x06, 0x28, 0x0e, 0xac, 0xfc, 0xd5, 0x5b, 0xcc, 0x03, 0x28,
	0x4b, 0xed, 0x48, 0x67, 0xe9, 0xd6, 0xac, 0x3f, 0xb5, 0xb5, 0xa2, 0xa8, 0x96, 0xb5, 0x05, 0xb2,
	0xca, 0x81, 0xb2, 0xe5, 0x5c, 0x6d, 0xbe, 0x5f, 0x95, 0xc2, 0x6b, 0x21, 0x1a, 0x6b, 0xad, 0x6a,
	0x8a, 0xdf, 0x11, 0xdf, 0xc6, 0x5d, 0x43, 0xcd, 0x82, 0xb4, 0xd7, 0x35, 0x93, 0x38, 0x5a, 0x3f,
	0x69, 0xd2, 0x08, 0xa7, 0x49, 0xa1, 0xf6, 0xae, 0x40, 0x4e, 0x69, 0xa3, 0xae, 0x83, 0xf9, 0x18,
	0x74, 0x17, 0x9f, 0xa3, 0xe1, 0x65, 0x37, 0xb5, 0xa9, 0xe3, 0xd8, 0x5e, 0x69, 0x86, 0xcf, 0x91,
	0x44, 0x67, 0x1c, 0x79, 0xee, 0xaa, 0xfd, 0xc3, 0x65, 0x23, 0xd5, 0x6e, 0x68, 0xb5, 0x11, 0xae,
	0xe7, 0x57, 0x74, 0x8a, 0x99, 0xf2, 0xc0, 0x37, 0x8e, 0x7a, 0xa8, 0x7d, 0xcc, 0x82, 0x71, 0x89,
	0x86, 0xe7, 0x20, 0x17, 0xb3, 0x39, 0x5c, 0x1b, 0x72, 0xaf, 0xfd, 0xdf, 0x1f, 0xb3, 0x72, 0x37,
	0x50, 0x29, 0xb0, 0x0a, 0x4f, 0xde, 0x7c, 0x78, 0x39, 0x06, 0xe1, 0xac, 0xfa, 0x64, 0xea, 0x6d,
	0xb0, 0xb1, 0x0f, 0x5f, 0x1b, 0x20, 0x3f, 0xc8, 0x59, 0xf0, 0xe7, 0xd1, 0xc5, 0x6f, 0x1b, 0xde,
	0xfc, 0xe5, 0x33, 0xde, 0xd0, 0xba, 0x96, 0xa4, 0xae, 0x22, 0xfc, 0x3e, 0xa9, 0x2b, 0xfe, 0x91,
	0x78, 0x6a, 0x80, 0x99, 0xa4, 0x23, 0xe0, 0xfa, 0x68, 0xa2, 0xb8, 0x21, 0xcd, 0x8d, 0x7b, 0x61,
	0xb5, 0x9c, 0xa2, 0x94, 0xf3, 0x1d, 0x9c, 0x4b, 0xca, 0x51, 0x26, 0x3e, 0x04, 0x59, 0xb5, 0xca,
	0xd0, 0x1a, 0x58, 0x33, 0xe1, 0x16, 0x73, 0x79, 0x24, 0x66, 0xf0, 0xb5, 0x48, 0x6f, 0x20, 0x8e,
	0x42, 0x06, 0x09, 0xc8, 0xaa, 0xdd, 0x1c, 0x42, 0x96, 0xf0, 0xcd, 0x10, 0xb2, 0xa4, 0x67, 0xfa,
	0x9b, 0x6b, 0x21, 0xde, 0xf4, 0xb0, 0x6f, 0x3f, 0xf4, 0xb0, 0xff, 0x48, 0xf0, 0xa9, 0xa5, 0x1d,
	0xc2, 0x97, 0xd8, 0xfc, 0x21, 0x7c, 0xc9, 0xad, 0xef, 0xe7, 0x3b, 0x70, 0x59, 0x8c, 0xef, 0x31,
	0x00, 0x3d, 0xef, 0xc1, 0xd5, 0x11, 0xfa, 0x63, 0x46, 0x36, 0xd7, 0xee, 0xc4, 0x69, 0xee, 0xb2,
	0xe4, 0x36, 0x61, 0x21, 0xd1, 0x6b, 0x53, 0x98, 0x59, 0x09, 0xa8, 0xff, 0x75, 0x71, 0x5d, 0x32,
	0x2e, 0xaf, 0x4b, 0xc6, 0xfb, 0xeb, 0x92, 0xf1, 0xe2, 0xa6, 0x94, 0xba, 0xbc, 0x29, 0xa5, 0xde,
	0xde, 0x94, 0x52, 0xff, 0xd7, 0x5a, 0x98, 0x1f, 0x74, 0xf6, 0xaa, 0x1e, 0x3d, 0xb2, 0x25, 0x1d,
	0xc5, 0xa4, 0x7b, 0xd8, 0x54, 0x3f, 0x1e, 0x27, 0x5b, 0xf6, 0xa9, 0x2a, 0xcd, 0xcf, 0x02, 0xc4,
	0xf6, 0xb2, 0xf2, 0xef, 0xe3, 0xd7, 0x4f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x2f, 0xde, 0x4d, 0xfa,
	0xfc, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	RecordsById(ctx context.Context, in *QueryRecordsByIdRequest, opts ...grpc.CallOption) (*QueryRecordsByIdResponse, error)
	RecordsByFingerprint(ctx context.Context, in *QueryRecordsByFingerprintRequest, opts ...grpc.CallOption) (*QueryRecordsByFingerprintResponse, error)
	RecordsByOwner(ctx context.Context, in *QueryRecordsByOwnerRequest, opts ...grpc.CallOption) (*QueryRecordsByOwnerResponse, error)
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	GetCid(ctx context.Context, in *QueryGetCidRequest, opts ...grpc.CallOption) (*QueryGetCidResponse, error)
	HasCid(ctx context.Context, in *QueryHasCidRequest, opts ...grpc.CallOption) (*QueryHasCidResponse, error)
	GetCidSize(ctx context.Context, in *QueryGetCidSizeRequest, opts ...grpc.CallOption) (*QueryGetCidSizeResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) RecordsById(ctx context.Context, in *QueryRecordsByIdRequest, opts ...grpc.CallOption) (*QueryRecordsByIdResponse, error) {
	out := new(QueryRecordsByIdResponse)
	err := c.cc.Invoke(ctx, "/likechain.iscn.Query/RecordsById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RecordsByFingerprint(ctx context.Context, in *QueryRecordsByFingerprintRequest, opts ...grpc.CallOption) (*QueryRecordsByFingerprintResponse, error) {
	out := new(QueryRecordsByFingerprintResponse)
	err := c.cc.Invoke(ctx, "/likechain.iscn.Query/RecordsByFingerprint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RecordsByOwner(ctx context.Context, in *QueryRecordsByOwnerRequest, opts ...grpc.CallOption) (*QueryRecordsByOwnerResponse, error) {
	out := new(QueryRecordsByOwnerResponse)
	err := c.cc.Invoke(ctx, "/likechain.iscn.Query/RecordsByOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/likechain.iscn.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetCid(ctx context.Context, in *QueryGetCidRequest, opts ...grpc.CallOption) (*QueryGetCidResponse, error) {
	out := new(QueryGetCidResponse)
	err := c.cc.Invoke(ctx, "/likechain.iscn.Query/GetCid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HasCid(ctx context.Context, in *QueryHasCidRequest, opts ...grpc.CallOption) (*QueryHasCidResponse, error) {
	out := new(QueryHasCidResponse)
	err := c.cc.Invoke(ctx, "/likechain.iscn.Query/HasCid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetCidSize(ctx context.Context, in *QueryGetCidSizeRequest, opts ...grpc.CallOption) (*QueryGetCidSizeResponse, error) {
	out := new(QueryGetCidSizeResponse)
	err := c.cc.Invoke(ctx, "/likechain.iscn.Query/GetCidSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	RecordsById(context.Context, *QueryRecordsByIdRequest) (*QueryRecordsByIdResponse, error)
	RecordsByFingerprint(context.Context, *QueryRecordsByFingerprintRequest) (*QueryRecordsByFingerprintResponse, error)
	RecordsByOwner(context.Context, *QueryRecordsByOwnerRequest) (*QueryRecordsByOwnerResponse, error)
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	GetCid(context.Context, *QueryGetCidRequest) (*QueryGetCidResponse, error)
	HasCid(context.Context, *QueryHasCidRequest) (*QueryHasCidResponse, error)
	GetCidSize(context.Context, *QueryGetCidSizeRequest) (*QueryGetCidSizeResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) RecordsById(ctx context.Context, req *QueryRecordsByIdRequest) (*QueryRecordsByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordsById not implemented")
}
func (*UnimplementedQueryServer) RecordsByFingerprint(ctx context.Context, req *QueryRecordsByFingerprintRequest) (*QueryRecordsByFingerprintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordsByFingerprint not implemented")
}
func (*UnimplementedQueryServer) RecordsByOwner(ctx context.Context, req *QueryRecordsByOwnerRequest) (*QueryRecordsByOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordsByOwner not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) GetCid(ctx context.Context, req *QueryGetCidRequest) (*QueryGetCidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCid not implemented")
}
func (*UnimplementedQueryServer) HasCid(ctx context.Context, req *QueryHasCidRequest) (*QueryHasCidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasCid not implemented")
}
func (*UnimplementedQueryServer) GetCidSize(ctx context.Context, req *QueryGetCidSizeRequest) (*QueryGetCidSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCidSize not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_RecordsById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRecordsByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RecordsById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/likechain.iscn.Query/RecordsById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RecordsById(ctx, req.(*QueryRecordsByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RecordsByFingerprint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRecordsByFingerprintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RecordsByFingerprint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/likechain.iscn.Query/RecordsByFingerprint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RecordsByFingerprint(ctx, req.(*QueryRecordsByFingerprintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RecordsByOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRecordsByOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RecordsByOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/likechain.iscn.Query/RecordsByOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RecordsByOwner(ctx, req.(*QueryRecordsByOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/likechain.iscn.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetCid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/likechain.iscn.Query/GetCid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCid(ctx, req.(*QueryGetCidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HasCid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHasCidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HasCid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/likechain.iscn.Query/HasCid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HasCid(ctx, req.(*QueryHasCidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetCidSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCidSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCidSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/likechain.iscn.Query/GetCidSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCidSize(ctx, req.(*QueryGetCidSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "likechain.iscn.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecordsById",
			Handler:    _Query_RecordsById_Handler,
		},
		{
			MethodName: "RecordsByFingerprint",
			Handler:    _Query_RecordsByFingerprint_Handler,
		},
		{
			MethodName: "RecordsByOwner",
			Handler:    _Query_RecordsByOwner_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "GetCid",
			Handler:    _Query_GetCid_Handler,
		},
		{
			MethodName: "HasCid",
			Handler:    _Query_HasCid_Handler,
		},
		{
			MethodName: "GetCidSize",
			Handler:    _Query_GetCidSize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "likechain/iscn/query.proto",
}

func (m *QueryResponseRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryResponseRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryResponseRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Data.Size()
		i -= size
		if _, err := m.Data.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Ipld) > 0 {
		i -= len(m.Ipld)
		copy(dAtA[i:], m.Ipld)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Ipld)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRecordsByIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRecordsByIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRecordsByIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ToVersion != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ToVersion))
		i--
		dAtA[i] = 0x18
	}
	if m.FromVersion != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.FromVersion))
		i--
		dAtA[i] = 0x10
	}
	if len(m.IscnId) > 0 {
		i -= len(m.IscnId)
		copy(dAtA[i:], m.IscnId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.IscnId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRecordsByIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRecordsByIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRecordsByIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.LatestVersion != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LatestVersion))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRecordsByFingerprintRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRecordsByFingerprintRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRecordsByFingerprintRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FromSequence != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.FromSequence))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Fingerprint) > 0 {
		i -= len(m.Fingerprint)
		copy(dAtA[i:], m.Fingerprint)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Fingerprint)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRecordsByFingerprintResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRecordsByFingerprintResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRecordsByFingerprintResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NextSequence != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.NextSequence))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryRecordsByOwnerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRecordsByOwnerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRecordsByOwnerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FromSequence != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.FromSequence))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRecordsByOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRecordsByOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRecordsByOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NextSequence != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.NextSequence))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetCidRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCidRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCidRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCidResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCidResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCidResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCidSizeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCidSizeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCidSizeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCidSizeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCidSizeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCidSizeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Size_ != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryHasCidRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHasCidRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHasCidRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryHasCidResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHasCidResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHasCidResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Exist {
		i--
		if m.Exist {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryResponseRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ipld)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.Data.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryRecordsByIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IscnId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.FromVersion != 0 {
		n += 1 + sovQuery(uint64(m.FromVersion))
	}
	if m.ToVersion != 0 {
		n += 1 + sovQuery(uint64(m.ToVersion))
	}
	return n
}

func (m *QueryRecordsByIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.LatestVersion != 0 {
		n += 1 + sovQuery(uint64(m.LatestVersion))
	}
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryRecordsByFingerprintRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Fingerprint)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.FromSequence != 0 {
		n += 1 + sovQuery(uint64(m.FromSequence))
	}
	return n
}

func (m *QueryRecordsByFingerprintResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.NextSequence != 0 {
		n += 1 + sovQuery(uint64(m.NextSequence))
	}
	return n
}

func (m *QueryRecordsByOwnerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.FromSequence != 0 {
		n += 1 + sovQuery(uint64(m.FromSequence))
	}
	return n
}

func (m *QueryRecordsByOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.NextSequence != 0 {
		n += 1 + sovQuery(uint64(m.NextSequence))
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetCidRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCidResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCidSizeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCidSizeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Size_ != 0 {
		n += 1 + sovQuery(uint64(m.Size_))
	}
	return n
}

func (m *QueryHasCidRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryHasCidResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Exist {
		n += 2
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryResponseRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryResponseRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryResponseRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipld", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ipld = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRecordsByIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRecordsByIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRecordsByIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IscnId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IscnId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromVersion", wireType)
			}
			m.FromVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromVersion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToVersion", wireType)
			}
			m.ToVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToVersion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRecordsByIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRecordsByIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRecordsByIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestVersion", wireType)
			}
			m.LatestVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestVersion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, QueryResponseRecord{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRecordsByFingerprintRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRecordsByFingerprintRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRecordsByFingerprintRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fingerprint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fingerprint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromSequence", wireType)
			}
			m.FromSequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromSequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRecordsByFingerprintResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRecordsByFingerprintResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRecordsByFingerprintResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, QueryResponseRecord{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextSequence", wireType)
			}
			m.NextSequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextSequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRecordsByOwnerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRecordsByOwnerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRecordsByOwnerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromSequence", wireType)
			}
			m.FromSequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromSequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRecordsByOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRecordsByOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRecordsByOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, QueryResponseRecord{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextSequence", wireType)
			}
			m.NextSequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextSequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCidRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCidRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCidRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCidResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCidResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCidResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCidSizeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCidSizeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCidSizeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCidSizeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCidSizeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCidSizeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHasCidRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHasCidRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHasCidRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHasCidResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHasCidResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHasCidResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exist", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Exist = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
