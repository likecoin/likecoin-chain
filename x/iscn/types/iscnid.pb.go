// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: likechain/iscn/iscnid.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type IscnIdPrefix struct {
	RegistryName string `protobuf:"bytes,1,opt,name=registry_name,json=registryName,proto3" json:"registry_name,omitempty"`
	ContentId    string `protobuf:"bytes,2,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"`
}

func (m *IscnIdPrefix) Reset()      { *m = IscnIdPrefix{} }
func (*IscnIdPrefix) ProtoMessage() {}
func (*IscnIdPrefix) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b68b64bb32d699d, []int{0}
}
func (m *IscnIdPrefix) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IscnIdPrefix) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IscnIdPrefix.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IscnIdPrefix) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IscnIdPrefix.Merge(m, src)
}
func (m *IscnIdPrefix) XXX_Size() int {
	return m.Size()
}
func (m *IscnIdPrefix) XXX_DiscardUnknown() {
	xxx_messageInfo_IscnIdPrefix.DiscardUnknown(m)
}

var xxx_messageInfo_IscnIdPrefix proto.InternalMessageInfo

func (m *IscnIdPrefix) GetRegistryName() string {
	if m != nil {
		return m.RegistryName
	}
	return ""
}

func (m *IscnIdPrefix) GetContentId() string {
	if m != nil {
		return m.ContentId
	}
	return ""
}

type IscnId struct {
	Prefix  IscnIdPrefix `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix"`
	Version uint64       `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *IscnId) Reset()      { *m = IscnId{} }
func (*IscnId) ProtoMessage() {}
func (*IscnId) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b68b64bb32d699d, []int{1}
}
func (m *IscnId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IscnId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IscnId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IscnId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IscnId.Merge(m, src)
}
func (m *IscnId) XXX_Size() int {
	return m.Size()
}
func (m *IscnId) XXX_DiscardUnknown() {
	xxx_messageInfo_IscnId.DiscardUnknown(m)
}

var xxx_messageInfo_IscnId proto.InternalMessageInfo

func (m *IscnId) GetPrefix() IscnIdPrefix {
	if m != nil {
		return m.Prefix
	}
	return IscnIdPrefix{}
}

func (m *IscnId) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func init() {
	proto.RegisterType((*IscnIdPrefix)(nil), "likechain.iscn.IscnIdPrefix")
	proto.RegisterType((*IscnId)(nil), "likechain.iscn.IscnId")
}

func init() { proto.RegisterFile("likechain/iscn/iscnid.proto", fileDescriptor_2b68b64bb32d699d) }

var fileDescriptor_2b68b64bb32d699d = []byte{
	// 273 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xce, 0xc9, 0xcc, 0x4e,
	0x4d, 0xce, 0x48, 0xcc, 0xcc, 0xd3, 0xcf, 0x2c, 0x4e, 0x86, 0x10, 0x99, 0x29, 0x7a, 0x05, 0x45,
	0xf9, 0x25, 0xf9, 0x42, 0x7c, 0x70, 0x49, 0x3d, 0x90, 0xb8, 0x94, 0x48, 0x7a, 0x7e, 0x7a, 0x3e,
	0x58, 0x4a, 0x1f, 0xc4, 0x82, 0xa8, 0x52, 0x4a, 0xe0, 0xe2, 0xf1, 0x2c, 0x4e, 0xce, 0xf3, 0x4c,
	0x09, 0x28, 0x4a, 0x4d, 0xcb, 0xac, 0x10, 0x52, 0xe6, 0xe2, 0x2d, 0x4a, 0x4d, 0xcf, 0x2c, 0x2e,
	0x29, 0xaa, 0x8c, 0xcf, 0x4b, 0xcc, 0x4d, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0xe2, 0x81,
	0x09, 0xfa, 0x25, 0xe6, 0xa6, 0x0a, 0xc9, 0x72, 0x71, 0x25, 0xe7, 0xe7, 0x95, 0xa4, 0xe6, 0x95,
	0xc4, 0x67, 0xa6, 0x48, 0x30, 0x81, 0x55, 0x70, 0x42, 0x45, 0x3c, 0x53, 0xac, 0x78, 0x66, 0x2c,
	0x90, 0x67, 0x78, 0xb1, 0x40, 0x9e, 0xb1, 0xe1, 0x8e, 0x02, 0x83, 0x52, 0x0e, 0x17, 0x1b, 0xc4,
	0x06, 0x21, 0x2b, 0x2e, 0xb6, 0x02, 0xb0, 0x2d, 0x60, 0x43, 0xb9, 0x8d, 0x64, 0xf4, 0x50, 0x9d,
	0xa8, 0x87, 0xec, 0x12, 0x27, 0x96, 0x13, 0xf7, 0xe4, 0x19, 0x82, 0xa0, 0x3a, 0x84, 0x24, 0xb8,
	0xd8, 0xcb, 0x52, 0x8b, 0x8a, 0x33, 0xf3, 0xf3, 0xc0, 0xf6, 0xb1, 0x04, 0xc1, 0xb8, 0xa8, 0xb6,
	0x39, 0xf9, 0x9c, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x13,
	0x1e, 0xcb, 0x31, 0x5c, 0x78, 0x2c, 0xc7, 0x70, 0xe3, 0xb1, 0x1c, 0x43, 0x94, 0x51, 0x7a, 0x66,
	0x49, 0x46, 0x69, 0x92, 0x5e, 0x72, 0x7e, 0xae, 0x3e, 0xd8, 0xde, 0xfc, 0xcc, 0x3c, 0x38, 0x43,
	0x17, 0x12, 0x8a, 0x65, 0x26, 0xfa, 0x15, 0x90, 0xa0, 0x2c, 0xa9, 0x2c, 0x48, 0x2d, 0x4e, 0x62,
	0x03, 0x07, 0x92, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xfa, 0x6f, 0x2d, 0xfc, 0x69, 0x01, 0x00,
	0x00,
}

func (this *IscnIdPrefix) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IscnIdPrefix)
	if !ok {
		that2, ok := that.(IscnIdPrefix)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RegistryName != that1.RegistryName {
		return false
	}
	if this.ContentId != that1.ContentId {
		return false
	}
	return true
}
func (this *IscnId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IscnId)
	if !ok {
		that2, ok := that.(IscnId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Prefix.Equal(&that1.Prefix) {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	return true
}
func (m *IscnIdPrefix) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IscnIdPrefix) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IscnIdPrefix) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContentId) > 0 {
		i -= len(m.ContentId)
		copy(dAtA[i:], m.ContentId)
		i = encodeVarintIscnid(dAtA, i, uint64(len(m.ContentId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RegistryName) > 0 {
		i -= len(m.RegistryName)
		copy(dAtA[i:], m.RegistryName)
		i = encodeVarintIscnid(dAtA, i, uint64(len(m.RegistryName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IscnId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IscnId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IscnId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		i = encodeVarintIscnid(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Prefix.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintIscnid(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintIscnid(dAtA []byte, offset int, v uint64) int {
	offset -= sovIscnid(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IscnIdPrefix) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RegistryName)
	if l > 0 {
		n += 1 + l + sovIscnid(uint64(l))
	}
	l = len(m.ContentId)
	if l > 0 {
		n += 1 + l + sovIscnid(uint64(l))
	}
	return n
}

func (m *IscnId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Prefix.Size()
	n += 1 + l + sovIscnid(uint64(l))
	if m.Version != 0 {
		n += 1 + sovIscnid(uint64(m.Version))
	}
	return n
}

func sovIscnid(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIscnid(x uint64) (n int) {
	return sovIscnid(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IscnIdPrefix) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIscnid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IscnIdPrefix: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IscnIdPrefix: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistryName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIscnid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIscnid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIscnid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegistryName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIscnid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIscnid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIscnid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIscnid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIscnid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IscnId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIscnid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IscnId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IscnId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIscnid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIscnid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIscnid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Prefix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIscnid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIscnid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIscnid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIscnid(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIscnid
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIscnid
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIscnid
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIscnid
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIscnid
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIscnid
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIscnid        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIscnid          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIscnid = fmt.Errorf("proto: unexpected end of group")
)
